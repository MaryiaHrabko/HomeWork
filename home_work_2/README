1. Циклы.
    1.1. Перемножить числа от 1 до числа (включительно) введенного через аргумент к исполняемой программе. Есть нюанс с переполнением, можно добавить проверки и сообщения пользователю. Пример: Ввели 5, должно получиться в консоли: 1 * 2 * 3 * 4 * 5 = ответ
    	1.1.1. Используя только цикл
>> Loops1_1
        1.1.2.* Используя рекурсию
>> Loops1_1_2

1.2. Все цифры из числа введенного через аргумент к исполняемой программе перемножить между собой и вывести ход вычислений в консоль. Пользователь обязан ввести целое число. Если ввели не целое то выдать сообщение о том что пользователь ввёл некорректные данные.
		1.2.1 Пример: Ввели 181232375, должно получиться в консоли: 1 * 8 * 1 * 2 * 3 * 2 * 3 * 7 * 5 = 10 080
		1.2.2 Пример: Ввели 99.2, должно получиться в консоли: Введено не целое число
		1.2.3 Пример: Ввели Привет, должно получиться в консоли: Введено не число
>> Loops1_2


1.3. Возведение в степень. Через консоль пользователь вводит два числа. Первое число это число которое мы будем возводить, Второе число это степень в которую возводят первое число. Степень - только положительная и целая. Возводимое число - может быть отрицательным и оно будет дробным. Math использовать нельзя.
	    1.3.1 Пример: Ввели 18 и 5, должно получиться в консоли: 18.0 ^ 5 = 1 889 568.0
		1.3.2 Пример: Ввели 7.5 и 2, должно получиться в консоли: 7.5 ^ 2 = 56.25
>> Loops1_3

1.4.* Умножать число long a = 1; пока не произойдёт переполнение. В конце в консоль вывести сообщение со значением до переполнения и после переполнения. Умножать на:
    	1.4.1. 3
    	1.4.2. 188
    	1.4.3. -19
    	1.4.4. Да и вообще на любое целочисленное
>> Loops1_4

1.5. Вывести таблицу умножения в консоль. В консоли должно получиться также как и на картинке.
>> Loops1_5

2. Массивы.
2.1. Создать класс ArraysUtils:
		2.1.1. Написать метод public static int[] arrayFromConsole() рядом с main. Данный метод размер массива и каждый его элемент запрашивает у пользователя через консоль.
			2.1.1.1. Пример int[] container = arrayFromConsole(). Результат: В методе arrayFromConsole будет запрошена информация у пользователя, пользователь вводит размер (3) и его элементы по порядку {4, 17, 32}. Соответсвенно будет создан массив размером 3 с элементами {4, 17, 32} и сохранён в переменную container.
>> ArraysUtilsConsole2_1_1

		2.1.2. Написать метод public static int[] arrayRandom(int size, int maxValueExclusion) рядом с main. Данный метод принимает два аргумента. Первый (size) указывает размер массива который мы хотим получить. Второй (maxValueExclusion) указывает до какого числа генерировать рандомные числа.
			2.1.2.1. Пример: int[] container = arrayRandom(5, 100). Результат: В методе arrayRandom будет создан массив размером 5 с числами от 0 до 99 (использовать класс Random) и сохранён в переменную container.
>> ArraysUtilsRandom2_1_2

2.2 Перебор массива при помощи do....while, while, for, foreach. Элементы массива вводить используя ранее созданный arrayFromConsole. Все задачи в одном классе, в отдельных методах. Должно получиться 3 метода (что такое метод https://metanit.com/java/tutorial/2.7.php):
		2.2.1. Вывести все элементы в консоль.
		2.2.2. Вывести каждый второй элемент массива в консоль.
		2.2.3. Вывести все элементы массива в консоль в обратном порядке.
>> Perebor

2.4 Задачи взяты с сайта https://taskcode.ru/array. На сайте есть пояснения по каждой из этих задач. Все задачи в одном классе, в отдельных методах. Для создания массивов использовать ранее созданный arrayRandom.
		2.4.1. Сумма четных положительных элементов массива
		2.4.2. Максимальный из элементов массива с четными индексами
		2.4.3. Элементы массива, которые меньше среднего арифметического
		2.4.4. Найти два наименьших (минимальных) элемента массива
		2.4.5. Сжать массив, удалив элементы, принадлежащие интервалу
		2.4.6. Сумма цифр массива
>> ZadachiRand

3. Нарисовать блок схему алгоритма работы пузырьковой сортировки. Результат должен быть в гите.
Сохранить следующие форматы файлов: (.drawio || .vsdx) && (.pdf || .svg)
>> Bubble-sort_flowchart.drawio
>> Bubble-sort_flowchart.pdf

4.* Выполнить сортировку массива с числами:
	4.1. После каждой сортировки в консоли у вас должно получиться "[Какой массив был до сортировки] -> [Каким стал массив после сортировки]". Для преобразования массива в текст можно использовать класс Arrays.
	4.2. Создать класс SortsUtils. Пишем в нём следующие алгоритмы:
		4.2.1. Пузырьковая сортировка
>> SortUtilsBubble4_2_1

		4.2.2. Шейкерная сортировка
>> SortUtilsShaker4_2_2

4.3. Для тестов используем предварительно созданные массивы (в коде ваши тесты должны остаться):
		4.3.1. {1,2,3,4,5,6}
		4.3.2. {1,1,1,1}
		4.3.3. {9,1,5,99,9,9}
		4.3.4. {}
>> Test

	4.4. После тестов написать код который будет массив через ранее созданный arrayRandom. Отсортировать.
>> BubbleSortRandom

	4.5. После рандома написать код который будет создавать массив через ранее созданный arrayFromConsole. Отсортировать.
>> BubbleSortConsole
